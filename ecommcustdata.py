# -*- coding: utf-8 -*-
"""EcommCustData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13LKGZWPXW5cvbh_FFfnS3A1Be3cUU_Ix

## Business Understanding

Make a prediction for how long the customer will be a member

## Data Understanding
---

* Email
* Address
* Avatar
* Time on App
* Time on Website
* Length of Membership
* Yearly Amount Spent

### Download dataset
"""

!pip install -q kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d iabdulw/ecommerce-customer-data

# from google.colab import drive
# drive.mount('/content/drive')

"""## Data Preparation"""

# import libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("darkgrid")

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score

# load dataset

df = pd.read_csv('/content/ecommerce-customer-data.zip')

"""### Fix Data Structure"""

# head a data

df.head()

# change columns name

df = df.rename(columns = {"\tEmail": "Email"})
df.columns

# data info

df.info()

# data describe

df.describe()

"""### Handle missing value"""

# Check missing value

df.isna().sum()

"""### Data distribution"""

# time on app

sns.displot(df["Time on App"], kde= True, color="Blue")

# time on website

sns.displot(df["Time on Website"], kde=True, color="Blue")

sns.pairplot(df)

sns.heatmap(df.corr(), annot=True)

"""### Feature Scaling"""

# create scaler

scaler = StandardScaler()

X = df[['Time on App', 'Time on Website', 'Yearly Amount Spent']]
y = df['Length of Membership']

# fit and transform data

X = scaler.fit_transform(X)

# split dataset

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""## Modeling"""

model = LinearRegression()

model.fit(X_train, y_train)

"""## Evaluation"""

y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)

print("R-Squared : ", r2)

pd.DataFrame(predict)